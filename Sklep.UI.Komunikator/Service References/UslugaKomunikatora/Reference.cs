//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sklep.UI.Komunikator.UslugaKomunikatora {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UslugaKomunikatora.ICzatService", CallbackContract=typeof(Sklep.UI.Komunikator.UslugaKomunikatora.ICzatServiceCallback))]
    public interface ICzatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICzatService/Połącz", ReplyAction="http://tempuri.org/ICzatService/PołączResponse")]
        bool Połącz(string imię);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICzatService/Połącz", ReplyAction="http://tempuri.org/ICzatService/PołączResponse")]
        System.Threading.Tasks.Task<bool> PołączAsync(string imię);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICzatService/WyślijWiadomość", ReplyAction="http://tempuri.org/ICzatService/WyślijWiadomośćResponse")]
        void WyślijWiadomość(string treść, string odbiorca);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICzatService/WyślijWiadomość", ReplyAction="http://tempuri.org/ICzatService/WyślijWiadomośćResponse")]
        System.Threading.Tasks.Task WyślijWiadomośćAsync(string treść, string odbiorca);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICzatService/Rozłącz", ReplyAction="http://tempuri.org/ICzatService/RozłączResponse")]
        void Rozłącz();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICzatService/Rozłącz", ReplyAction="http://tempuri.org/ICzatService/RozłączResponse")]
        System.Threading.Tasks.Task RozłączAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICzatService/getImiona", ReplyAction="http://tempuri.org/ICzatService/getImionaResponse")]
        string[] getImiona();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICzatService/getImiona", ReplyAction="http://tempuri.org/ICzatService/getImionaResponse")]
        System.Threading.Tasks.Task<string[]> getImionaAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICzatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICzatService/WyświetlWiadomość", ReplyAction="http://tempuri.org/ICzatService/WyświetlWiadomośćResponse")]
        void WyświetlWiadomość(string nadawca, string treść);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICzatServiceChannel : Sklep.UI.Komunikator.UslugaKomunikatora.ICzatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CzatServiceClient : System.ServiceModel.DuplexClientBase<Sklep.UI.Komunikator.UslugaKomunikatora.ICzatService>, Sklep.UI.Komunikator.UslugaKomunikatora.ICzatService {
        
        public CzatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CzatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CzatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CzatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CzatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Połącz(string imię) {
            return base.Channel.Połącz(imię);
        }
        
        public System.Threading.Tasks.Task<bool> PołączAsync(string imię) {
            return base.Channel.PołączAsync(imię);
        }
        
        public void WyślijWiadomość(string treść, string odbiorca) {
            base.Channel.WyślijWiadomość(treść, odbiorca);
        }
        
        public System.Threading.Tasks.Task WyślijWiadomośćAsync(string treść, string odbiorca) {
            return base.Channel.WyślijWiadomośćAsync(treść, odbiorca);
        }
        
        public void Rozłącz() {
            base.Channel.Rozłącz();
        }
        
        public System.Threading.Tasks.Task RozłączAsync() {
            return base.Channel.RozłączAsync();
        }
        
        public string[] getImiona() {
            return base.Channel.getImiona();
        }
        
        public System.Threading.Tasks.Task<string[]> getImionaAsync() {
            return base.Channel.getImionaAsync();
        }
    }
}
